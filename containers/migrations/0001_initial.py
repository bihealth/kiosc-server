# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2021-04-06 10:37
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projectroles', '0017_project_full_title'),
        ('bgjobs', '0006_auto_20200526_1657'),
    ]

    operations = [
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='DateTime of container creation')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='DateTime of last container modification')),
                ('date_last_logs', models.DateTimeField(auto_now_add=True, help_text='DateTime of last log pull')),
                ('sodar_uuid', models.UUIDField(default=uuid.uuid4, help_text='Container SODAR UUID', unique=True)),
                ('container_id', models.CharField(blank=True, help_text='Container ID', max_length=128, null=True)),
                ('container_port', models.IntegerField(default=80, help_text='Server port within the container')),
                ('container_path', models.CharField(help_text='Path segment of the container URL', max_length=512)),
                ('heartbeat_url', models.CharField(blank=True, help_text='Optional heartbeat URL to check if server in Docker container is alive', max_length=512, null=True)),
                ('host_port', models.IntegerField(help_text='Port of the container on the host', unique=True)),
                ('timeout', models.IntegerField(default=60, help_text='Interval in seconds for a container remain in start up state.')),
                ('timeout_exceeded', models.BooleanField(default=False, help_text='Whether or not the container has timed out during start up')),
                ('state', models.CharField(choices=[('created', 'created'), ('restarting', 'restarting'), ('running', 'running'), ('paused', 'paused'), ('exited', 'exited'), ('dead', 'dead'), ('deleting', 'deleting'), ('deleted', 'deleted'), ('pulling', 'pulling')], default='pulling', help_text='The state of the container.', max_length=32)),
                ('environment', django.contrib.postgres.fields.jsonb.JSONField(help_text='The environment variables to use')),
                ('command', models.TextField(blank=True, help_text='The command to execute', null=True)),
                ('project', models.ForeignKey(help_text='Project in which this container belongs', on_delete=django.db.models.deletion.CASCADE, to='projectroles.Project')),
            ],
            options={
                'ordering': ('-date_created',),
            },
        ),
        migrations.CreateModel(
            name='ContainerBackgroundJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='DateTime of creation')),
                ('sodar_uuid', models.UUIDField(default=uuid.uuid4, help_text='Background job specialization SODAR UUID', unique=True)),
                ('action', models.CharField(choices=[('start', 'start'), ('restart', 'restart'), ('stop', 'stop')], max_length=32)),
                ('bg_job', models.ForeignKey(help_text='Background job for state etc.', on_delete=django.db.models.deletion.CASCADE, related_name='containers_containerbackgroundjob_related', to='bgjobs.BackgroundJob')),
                ('process', models.ForeignKey(help_text='The container that the job belongs to', on_delete=django.db.models.deletion.CASCADE, to='containers.Container')),
                ('project', models.ForeignKey(help_text='Project in which this objects belongs', on_delete=django.db.models.deletion.CASCADE, to='projectroles.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ContainerLogEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='DateTime of creation')),
                ('level', models.CharField(choices=[('info', 'info'), ('warning', 'warning'), ('error', 'error')], default='info', help_text='Level of log entry', max_length=32)),
                ('text', models.TextField()),
                ('container', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_entries', to='containers.Container')),
            ],
        ),
        migrations.CreateModel(
            name='ContainerTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
    ]
